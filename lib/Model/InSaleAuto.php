<?php
/**
 * InSaleAuto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VIN-API
 *
 * # Условия использования  Данные, получаемые в API не подлежат передаче третьим лицам. Предоставляются исключительно для личного пользования. В случае обнаружения нарушений, администрация в праве в одностороннем порядке заблокировать доступ к API до выяснения обстоятельств.  # Принцип работы API  API асинхронное. Для того чтобы получить данные по VIN сначала необходимо добавить задачу в очередь и получить ее уникальный идентификатор. После чего уже по этому идентификатору можно получить данные.  При постановке задачи в очередь, вы можете указать URL, на который по ее готовности система автоматически отправит POST запрос с результатом. Таким образом не нужно будет самим забирать результат. В случае, если URL окажется недоступен, система попробует повторить отправку от 1 до 5 раз с разными интервалами. В случае, если эти попытки окажутся безуспешными, система перестанет отправлять результат и необходимо будет уже самостоятельно сделать запрос в API на получение результата по идентификатору задачи. Успешным является запрос, в ходе которого удаленный сервер вернул статус 200. Все остальные статусы система рассматривает как безуспешные.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@autobius.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InSaleAuto Class Doc Comment
 *
 * @category    Class */
 // @description InSaleAuto единица представления автомобиля на рынке
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InSaleAuto implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InSaleAuto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'body' => 'string',
        'city' => 'string',
        'color' => 'string',
        'doors' => 'string',
        'drive' => 'string',
        'engine' => 'string',
        'engine_vol' => 'float',
        'generation' => 'string',
        'horse_power' => 'int',
        'mark' => 'string',
        'model' => 'string',
        'owners_num' => 'int',
        'price' => 'double',
        'run' => 'int',
        'status' => 'string',
        'transmission' => 'string',
        'wheel' => 'string',
        'year' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'body' => 'body',
        'city' => 'city',
        'color' => 'color',
        'doors' => 'doors',
        'drive' => 'drive',
        'engine' => 'engine',
        'engine_vol' => 'engine_vol',
        'generation' => 'generation',
        'horse_power' => 'horse_power',
        'mark' => 'mark',
        'model' => 'model',
        'owners_num' => 'owners_num',
        'price' => 'price',
        'run' => 'run',
        'status' => 'status',
        'transmission' => 'transmission',
        'wheel' => 'wheel',
        'year' => 'year'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'body' => 'setBody',
        'city' => 'setCity',
        'color' => 'setColor',
        'doors' => 'setDoors',
        'drive' => 'setDrive',
        'engine' => 'setEngine',
        'engine_vol' => 'setEngineVol',
        'generation' => 'setGeneration',
        'horse_power' => 'setHorsePower',
        'mark' => 'setMark',
        'model' => 'setModel',
        'owners_num' => 'setOwnersNum',
        'price' => 'setPrice',
        'run' => 'setRun',
        'status' => 'setStatus',
        'transmission' => 'setTransmission',
        'wheel' => 'setWheel',
        'year' => 'setYear'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'body' => 'getBody',
        'city' => 'getCity',
        'color' => 'getColor',
        'doors' => 'getDoors',
        'drive' => 'getDrive',
        'engine' => 'getEngine',
        'engine_vol' => 'getEngineVol',
        'generation' => 'getGeneration',
        'horse_power' => 'getHorsePower',
        'mark' => 'getMark',
        'model' => 'getModel',
        'owners_num' => 'getOwnersNum',
        'price' => 'getPrice',
        'run' => 'getRun',
        'status' => 'getStatus',
        'transmission' => 'getTransmission',
        'wheel' => 'getWheel',
        'year' => 'getYear'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['doors'] = isset($data['doors']) ? $data['doors'] : null;
        $this->container['drive'] = isset($data['drive']) ? $data['drive'] : null;
        $this->container['engine'] = isset($data['engine']) ? $data['engine'] : null;
        $this->container['engine_vol'] = isset($data['engine_vol']) ? $data['engine_vol'] : null;
        $this->container['generation'] = isset($data['generation']) ? $data['generation'] : null;
        $this->container['horse_power'] = isset($data['horse_power']) ? $data['horse_power'] : null;
        $this->container['mark'] = isset($data['mark']) ? $data['mark'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['owners_num'] = isset($data['owners_num']) ? $data['owners_num'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['run'] = isset($data['run']) ? $data['run'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['transmission'] = isset($data['transmission']) ? $data['transmission'] : null;
        $this->container['wheel'] = isset($data['wheel']) ? $data['wheel'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets body
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     * @param string $body Тип кузова
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city Город в котором автомобиль сейчас продается
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets color
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     * @param string $color Цвет
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets doors
     * @return string
     */
    public function getDoors()
    {
        return $this->container['doors'];
    }

    /**
     * Sets doors
     * @param string $doors Количество дверей
     * @return $this
     */
    public function setDoors($doors)
    {
        $this->container['doors'] = $doors;

        return $this;
    }

    /**
     * Gets drive
     * @return string
     */
    public function getDrive()
    {
        return $this->container['drive'];
    }

    /**
     * Sets drive
     * @param string $drive Привод
     * @return $this
     */
    public function setDrive($drive)
    {
        $this->container['drive'] = $drive;

        return $this;
    }

    /**
     * Gets engine
     * @return string
     */
    public function getEngine()
    {
        return $this->container['engine'];
    }

    /**
     * Sets engine
     * @param string $engine Двигатель
     * @return $this
     */
    public function setEngine($engine)
    {
        $this->container['engine'] = $engine;

        return $this;
    }

    /**
     * Gets engine_vol
     * @return float
     */
    public function getEngineVol()
    {
        return $this->container['engine_vol'];
    }

    /**
     * Sets engine_vol
     * @param float $engine_vol Объем двигателя
     * @return $this
     */
    public function setEngineVol($engine_vol)
    {
        $this->container['engine_vol'] = $engine_vol;

        return $this;
    }

    /**
     * Gets generation
     * @return string
     */
    public function getGeneration()
    {
        return $this->container['generation'];
    }

    /**
     * Sets generation
     * @param string $generation Поколение
     * @return $this
     */
    public function setGeneration($generation)
    {
        $this->container['generation'] = $generation;

        return $this;
    }

    /**
     * Gets horse_power
     * @return int
     */
    public function getHorsePower()
    {
        return $this->container['horse_power'];
    }

    /**
     * Sets horse_power
     * @param int $horse_power Мощность л.с.
     * @return $this
     */
    public function setHorsePower($horse_power)
    {
        $this->container['horse_power'] = $horse_power;

        return $this;
    }

    /**
     * Gets mark
     * @return string
     */
    public function getMark()
    {
        return $this->container['mark'];
    }

    /**
     * Sets mark
     * @param string $mark Марка
     * @return $this
     */
    public function setMark($mark)
    {
        $this->container['mark'] = $mark;

        return $this;
    }

    /**
     * Gets model
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     * @param string $model Модель
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets owners_num
     * @return int
     */
    public function getOwnersNum()
    {
        return $this->container['owners_num'];
    }

    /**
     * Sets owners_num
     * @param int $owners_num Количество владельцев
     * @return $this
     */
    public function setOwnersNum($owners_num)
    {
        $this->container['owners_num'] = $owners_num;

        return $this;
    }

    /**
     * Gets price
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param double $price Цена конкретного автомобиля
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets run
     * @return int
     */
    public function getRun()
    {
        return $this->container['run'];
    }

    /**
     * Sets run
     * @param int $run Пробег
     * @return $this
     */
    public function setRun($run)
    {
        $this->container['run'] = $run;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Битый/не битый
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transmission
     * @return string
     */
    public function getTransmission()
    {
        return $this->container['transmission'];
    }

    /**
     * Sets transmission
     * @param string $transmission Коробка передач
     * @return $this
     */
    public function setTransmission($transmission)
    {
        $this->container['transmission'] = $transmission;

        return $this;
    }

    /**
     * Gets wheel
     * @return string
     */
    public function getWheel()
    {
        return $this->container['wheel'];
    }

    /**
     * Sets wheel
     * @param string $wheel Расположение руля
     * @return $this
     */
    public function setWheel($wheel)
    {
        $this->container['wheel'] = $wheel;

        return $this;
    }

    /**
     * Gets year
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     * @param int $year Год производства
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


