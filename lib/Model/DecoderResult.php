<?php
/**
 * DecoderResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VIN-API
 *
 * # Условия использования  Данные, получаемые в API не подлежат передаче третьим лицам. Предоставляются исключительно для личного пользования. В случае обнаружения нарушений, администрация в праве в одностороннем порядке заблокировать доступ к API до выяснения обстоятельств.  # Принцип работы API  API асинхронное. Для того чтобы получить данные по VIN сначала необходимо добавить задачу в очередь и получить ее уникальный идентификатор. После чего уже по этому идентификатору можно получить данные.  При постановке задачи в очередь, вы можете указать URL, на который по ее готовности система автоматически отправит POST запрос с результатом. Таким образом не нужно будет самим забирать результат. В случае, если URL окажется недоступен, система попробует повторить отправку от 1 до 5 раз с разными интервалами. В случае, если эти попытки окажутся безуспешными, система перестанет отправлять результат и необходимо будет уже самостоятельно сделать запрос в API на получение результата по идентификатору задачи. Успешным является запрос, в ходе которого удаленный сервер вернул статус 200. Все остальные статусы система рассматривает как безуспешные.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@autobius.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * DecoderResult Class Doc Comment
 *
 * @category    Class */
 // @description DecoderResult результат собранный по данным VIN декодера
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DecoderResult implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DecoderResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'assembly_plant' => 'string',
        'body' => 'string',
        'brand' => 'string',
        'brand_owner' => 'string',
        'complete' => 'bool',
        'country' => 'string',
        'country_code' => 'string',
        'doors' => 'int',
        'drive' => 'string',
        'engine' => 'string',
        'engine_size' => 'int',
        'engine_volume' => 'float',
        'equipment' => 'string',
        'equipment_option_codes' => 'string[]',
        'equipment_options' => 'string[]',
        'generation' => 'string',
        'horsepower' => 'int',
        'is_primary' => 'bool',
        'manufacturer' => 'string',
        'manufacturer_id' => 'int',
        'mark' => 'string',
        'market' => 'string',
        'market_info' => '\Swagger\Client\Model\MarketInfo',
        'model' => 'string',
        'model_year_end' => 'int',
        'model_year_start' => 'int',
        'modification' => 'string',
        'recall_source' => 'string',
        'technical_info' => '\Swagger\Client\Model\Element[]',
        'transmission' => 'string',
        'vds' => 'string',
        'vehicle_type' => 'string',
        'vin' => 'string',
        'vin_validation' => 'string',
        'vis' => 'string',
        'warnings' => 'string[]',
        'was_recalled' => 'bool',
        'wheel' => 'string',
        'wmi' => 'string',
        'year' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'assembly_plant' => 'assembly_plant',
        'body' => 'body',
        'brand' => 'brand',
        'brand_owner' => 'brand_owner',
        'complete' => 'complete',
        'country' => 'country',
        'country_code' => 'country_code',
        'doors' => 'doors',
        'drive' => 'drive',
        'engine' => 'engine',
        'engine_size' => 'engine_size',
        'engine_volume' => 'engine_volume',
        'equipment' => 'equipment',
        'equipment_option_codes' => 'equipment_option_codes',
        'equipment_options' => 'equipment_options',
        'generation' => 'generation',
        'horsepower' => 'horsepower',
        'is_primary' => 'is_primary',
        'manufacturer' => 'manufacturer',
        'manufacturer_id' => 'manufacturer_id',
        'mark' => 'mark',
        'market' => 'market',
        'market_info' => 'market_info',
        'model' => 'model',
        'model_year_end' => 'model_year_end',
        'model_year_start' => 'model_year_start',
        'modification' => 'modification',
        'recall_source' => 'recall_source',
        'technical_info' => 'technical_info',
        'transmission' => 'transmission',
        'vds' => 'vds',
        'vehicle_type' => 'vehicle_type',
        'vin' => 'vin',
        'vin_validation' => 'vin_validation',
        'vis' => 'vis',
        'warnings' => 'warnings',
        'was_recalled' => 'was_recalled',
        'wheel' => 'wheel',
        'wmi' => 'wmi',
        'year' => 'year'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'assembly_plant' => 'setAssemblyPlant',
        'body' => 'setBody',
        'brand' => 'setBrand',
        'brand_owner' => 'setBrandOwner',
        'complete' => 'setComplete',
        'country' => 'setCountry',
        'country_code' => 'setCountryCode',
        'doors' => 'setDoors',
        'drive' => 'setDrive',
        'engine' => 'setEngine',
        'engine_size' => 'setEngineSize',
        'engine_volume' => 'setEngineVolume',
        'equipment' => 'setEquipment',
        'equipment_option_codes' => 'setEquipmentOptionCodes',
        'equipment_options' => 'setEquipmentOptions',
        'generation' => 'setGeneration',
        'horsepower' => 'setHorsepower',
        'is_primary' => 'setIsPrimary',
        'manufacturer' => 'setManufacturer',
        'manufacturer_id' => 'setManufacturerId',
        'mark' => 'setMark',
        'market' => 'setMarket',
        'market_info' => 'setMarketInfo',
        'model' => 'setModel',
        'model_year_end' => 'setModelYearEnd',
        'model_year_start' => 'setModelYearStart',
        'modification' => 'setModification',
        'recall_source' => 'setRecallSource',
        'technical_info' => 'setTechnicalInfo',
        'transmission' => 'setTransmission',
        'vds' => 'setVds',
        'vehicle_type' => 'setVehicleType',
        'vin' => 'setVin',
        'vin_validation' => 'setVinValidation',
        'vis' => 'setVis',
        'warnings' => 'setWarnings',
        'was_recalled' => 'setWasRecalled',
        'wheel' => 'setWheel',
        'wmi' => 'setWmi',
        'year' => 'setYear'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'assembly_plant' => 'getAssemblyPlant',
        'body' => 'getBody',
        'brand' => 'getBrand',
        'brand_owner' => 'getBrandOwner',
        'complete' => 'getComplete',
        'country' => 'getCountry',
        'country_code' => 'getCountryCode',
        'doors' => 'getDoors',
        'drive' => 'getDrive',
        'engine' => 'getEngine',
        'engine_size' => 'getEngineSize',
        'engine_volume' => 'getEngineVolume',
        'equipment' => 'getEquipment',
        'equipment_option_codes' => 'getEquipmentOptionCodes',
        'equipment_options' => 'getEquipmentOptions',
        'generation' => 'getGeneration',
        'horsepower' => 'getHorsepower',
        'is_primary' => 'getIsPrimary',
        'manufacturer' => 'getManufacturer',
        'manufacturer_id' => 'getManufacturerId',
        'mark' => 'getMark',
        'market' => 'getMarket',
        'market_info' => 'getMarketInfo',
        'model' => 'getModel',
        'model_year_end' => 'getModelYearEnd',
        'model_year_start' => 'getModelYearStart',
        'modification' => 'getModification',
        'recall_source' => 'getRecallSource',
        'technical_info' => 'getTechnicalInfo',
        'transmission' => 'getTransmission',
        'vds' => 'getVds',
        'vehicle_type' => 'getVehicleType',
        'vin' => 'getVin',
        'vin_validation' => 'getVinValidation',
        'vis' => 'getVis',
        'warnings' => 'getWarnings',
        'was_recalled' => 'getWasRecalled',
        'wheel' => 'getWheel',
        'wmi' => 'getWmi',
        'year' => 'getYear'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assembly_plant'] = isset($data['assembly_plant']) ? $data['assembly_plant'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['brand_owner'] = isset($data['brand_owner']) ? $data['brand_owner'] : null;
        $this->container['complete'] = isset($data['complete']) ? $data['complete'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['doors'] = isset($data['doors']) ? $data['doors'] : null;
        $this->container['drive'] = isset($data['drive']) ? $data['drive'] : null;
        $this->container['engine'] = isset($data['engine']) ? $data['engine'] : null;
        $this->container['engine_size'] = isset($data['engine_size']) ? $data['engine_size'] : null;
        $this->container['engine_volume'] = isset($data['engine_volume']) ? $data['engine_volume'] : null;
        $this->container['equipment'] = isset($data['equipment']) ? $data['equipment'] : null;
        $this->container['equipment_option_codes'] = isset($data['equipment_option_codes']) ? $data['equipment_option_codes'] : null;
        $this->container['equipment_options'] = isset($data['equipment_options']) ? $data['equipment_options'] : null;
        $this->container['generation'] = isset($data['generation']) ? $data['generation'] : null;
        $this->container['horsepower'] = isset($data['horsepower']) ? $data['horsepower'] : null;
        $this->container['is_primary'] = isset($data['is_primary']) ? $data['is_primary'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['manufacturer_id'] = isset($data['manufacturer_id']) ? $data['manufacturer_id'] : null;
        $this->container['mark'] = isset($data['mark']) ? $data['mark'] : null;
        $this->container['market'] = isset($data['market']) ? $data['market'] : null;
        $this->container['market_info'] = isset($data['market_info']) ? $data['market_info'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['model_year_end'] = isset($data['model_year_end']) ? $data['model_year_end'] : null;
        $this->container['model_year_start'] = isset($data['model_year_start']) ? $data['model_year_start'] : null;
        $this->container['modification'] = isset($data['modification']) ? $data['modification'] : null;
        $this->container['recall_source'] = isset($data['recall_source']) ? $data['recall_source'] : null;
        $this->container['technical_info'] = isset($data['technical_info']) ? $data['technical_info'] : null;
        $this->container['transmission'] = isset($data['transmission']) ? $data['transmission'] : null;
        $this->container['vds'] = isset($data['vds']) ? $data['vds'] : null;
        $this->container['vehicle_type'] = isset($data['vehicle_type']) ? $data['vehicle_type'] : null;
        $this->container['vin'] = isset($data['vin']) ? $data['vin'] : null;
        $this->container['vin_validation'] = isset($data['vin_validation']) ? $data['vin_validation'] : null;
        $this->container['vis'] = isset($data['vis']) ? $data['vis'] : null;
        $this->container['warnings'] = isset($data['warnings']) ? $data['warnings'] : null;
        $this->container['was_recalled'] = isset($data['was_recalled']) ? $data['was_recalled'] : null;
        $this->container['wheel'] = isset($data['wheel']) ? $data['wheel'] : null;
        $this->container['wmi'] = isset($data['wmi']) ? $data['wmi'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets assembly_plant
     * @return string
     */
    public function getAssemblyPlant()
    {
        return $this->container['assembly_plant'];
    }

    /**
     * Sets assembly_plant
     * @param string $assembly_plant
     * @return $this
     */
    public function setAssemblyPlant($assembly_plant)
    {
        $this->container['assembly_plant'] = $assembly_plant;

        return $this;
    }

    /**
     * Gets body
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     * @param string $body
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets brand
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     * @param string $brand
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets brand_owner
     * @return string
     */
    public function getBrandOwner()
    {
        return $this->container['brand_owner'];
    }

    /**
     * Sets brand_owner
     * @param string $brand_owner
     * @return $this
     */
    public function setBrandOwner($brand_owner)
    {
        $this->container['brand_owner'] = $brand_owner;

        return $this;
    }

    /**
     * Gets complete
     * @return bool
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     * @param bool $complete
     * @return $this
     */
    public function setComplete($complete)
    {
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets country_code
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     * @param string $country_code
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets doors
     * @return int
     */
    public function getDoors()
    {
        return $this->container['doors'];
    }

    /**
     * Sets doors
     * @param int $doors
     * @return $this
     */
    public function setDoors($doors)
    {
        $this->container['doors'] = $doors;

        return $this;
    }

    /**
     * Gets drive
     * @return string
     */
    public function getDrive()
    {
        return $this->container['drive'];
    }

    /**
     * Sets drive
     * @param string $drive
     * @return $this
     */
    public function setDrive($drive)
    {
        $this->container['drive'] = $drive;

        return $this;
    }

    /**
     * Gets engine
     * @return string
     */
    public function getEngine()
    {
        return $this->container['engine'];
    }

    /**
     * Sets engine
     * @param string $engine
     * @return $this
     */
    public function setEngine($engine)
    {
        $this->container['engine'] = $engine;

        return $this;
    }

    /**
     * Gets engine_size
     * @return int
     */
    public function getEngineSize()
    {
        return $this->container['engine_size'];
    }

    /**
     * Sets engine_size
     * @param int $engine_size
     * @return $this
     */
    public function setEngineSize($engine_size)
    {
        $this->container['engine_size'] = $engine_size;

        return $this;
    }

    /**
     * Gets engine_volume
     * @return float
     */
    public function getEngineVolume()
    {
        return $this->container['engine_volume'];
    }

    /**
     * Sets engine_volume
     * @param float $engine_volume
     * @return $this
     */
    public function setEngineVolume($engine_volume)
    {
        $this->container['engine_volume'] = $engine_volume;

        return $this;
    }

    /**
     * Gets equipment
     * @return string
     */
    public function getEquipment()
    {
        return $this->container['equipment'];
    }

    /**
     * Sets equipment
     * @param string $equipment
     * @return $this
     */
    public function setEquipment($equipment)
    {
        $this->container['equipment'] = $equipment;

        return $this;
    }

    /**
     * Gets equipment_option_codes
     * @return string[]
     */
    public function getEquipmentOptionCodes()
    {
        return $this->container['equipment_option_codes'];
    }

    /**
     * Sets equipment_option_codes
     * @param string[] $equipment_option_codes
     * @return $this
     */
    public function setEquipmentOptionCodes($equipment_option_codes)
    {
        $this->container['equipment_option_codes'] = $equipment_option_codes;

        return $this;
    }

    /**
     * Gets equipment_options
     * @return string[]
     */
    public function getEquipmentOptions()
    {
        return $this->container['equipment_options'];
    }

    /**
     * Sets equipment_options
     * @param string[] $equipment_options
     * @return $this
     */
    public function setEquipmentOptions($equipment_options)
    {
        $this->container['equipment_options'] = $equipment_options;

        return $this;
    }

    /**
     * Gets generation
     * @return string
     */
    public function getGeneration()
    {
        return $this->container['generation'];
    }

    /**
     * Sets generation
     * @param string $generation
     * @return $this
     */
    public function setGeneration($generation)
    {
        $this->container['generation'] = $generation;

        return $this;
    }

    /**
     * Gets horsepower
     * @return int
     */
    public function getHorsepower()
    {
        return $this->container['horsepower'];
    }

    /**
     * Sets horsepower
     * @param int $horsepower
     * @return $this
     */
    public function setHorsepower($horsepower)
    {
        $this->container['horsepower'] = $horsepower;

        return $this;
    }

    /**
     * Gets is_primary
     * @return bool
     */
    public function getIsPrimary()
    {
        return $this->container['is_primary'];
    }

    /**
     * Sets is_primary
     * @param bool $is_primary
     * @return $this
     */
    public function setIsPrimary($is_primary)
    {
        $this->container['is_primary'] = $is_primary;

        return $this;
    }

    /**
     * Gets manufacturer
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     * @param string $manufacturer
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets manufacturer_id
     * @return int
     */
    public function getManufacturerId()
    {
        return $this->container['manufacturer_id'];
    }

    /**
     * Sets manufacturer_id
     * @param int $manufacturer_id
     * @return $this
     */
    public function setManufacturerId($manufacturer_id)
    {
        $this->container['manufacturer_id'] = $manufacturer_id;

        return $this;
    }

    /**
     * Gets mark
     * @return string
     */
    public function getMark()
    {
        return $this->container['mark'];
    }

    /**
     * Sets mark
     * @param string $mark
     * @return $this
     */
    public function setMark($mark)
    {
        $this->container['mark'] = $mark;

        return $this;
    }

    /**
     * Gets market
     * @return string
     */
    public function getMarket()
    {
        return $this->container['market'];
    }

    /**
     * Sets market
     * @param string $market
     * @return $this
     */
    public function setMarket($market)
    {
        $this->container['market'] = $market;

        return $this;
    }

    /**
     * Gets market_info
     * @return \Swagger\Client\Model\MarketInfo
     */
    public function getMarketInfo()
    {
        return $this->container['market_info'];
    }

    /**
     * Sets market_info
     * @param \Swagger\Client\Model\MarketInfo $market_info
     * @return $this
     */
    public function setMarketInfo($market_info)
    {
        $this->container['market_info'] = $market_info;

        return $this;
    }

    /**
     * Gets model
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     * @param string $model
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets model_year_end
     * @return int
     */
    public function getModelYearEnd()
    {
        return $this->container['model_year_end'];
    }

    /**
     * Sets model_year_end
     * @param int $model_year_end
     * @return $this
     */
    public function setModelYearEnd($model_year_end)
    {
        $this->container['model_year_end'] = $model_year_end;

        return $this;
    }

    /**
     * Gets model_year_start
     * @return int
     */
    public function getModelYearStart()
    {
        return $this->container['model_year_start'];
    }

    /**
     * Sets model_year_start
     * @param int $model_year_start
     * @return $this
     */
    public function setModelYearStart($model_year_start)
    {
        $this->container['model_year_start'] = $model_year_start;

        return $this;
    }

    /**
     * Gets modification
     * @return string
     */
    public function getModification()
    {
        return $this->container['modification'];
    }

    /**
     * Sets modification
     * @param string $modification
     * @return $this
     */
    public function setModification($modification)
    {
        $this->container['modification'] = $modification;

        return $this;
    }

    /**
     * Gets recall_source
     * @return string
     */
    public function getRecallSource()
    {
        return $this->container['recall_source'];
    }

    /**
     * Sets recall_source
     * @param string $recall_source
     * @return $this
     */
    public function setRecallSource($recall_source)
    {
        $this->container['recall_source'] = $recall_source;

        return $this;
    }

    /**
     * Gets technical_info
     * @return \Swagger\Client\Model\Element[]
     */
    public function getTechnicalInfo()
    {
        return $this->container['technical_info'];
    }

    /**
     * Sets technical_info
     * @param \Swagger\Client\Model\Element[] $technical_info
     * @return $this
     */
    public function setTechnicalInfo($technical_info)
    {
        $this->container['technical_info'] = $technical_info;

        return $this;
    }

    /**
     * Gets transmission
     * @return string
     */
    public function getTransmission()
    {
        return $this->container['transmission'];
    }

    /**
     * Sets transmission
     * @param string $transmission
     * @return $this
     */
    public function setTransmission($transmission)
    {
        $this->container['transmission'] = $transmission;

        return $this;
    }

    /**
     * Gets vds
     * @return string
     */
    public function getVds()
    {
        return $this->container['vds'];
    }

    /**
     * Sets vds
     * @param string $vds
     * @return $this
     */
    public function setVds($vds)
    {
        $this->container['vds'] = $vds;

        return $this;
    }

    /**
     * Gets vehicle_type
     * @return string
     */
    public function getVehicleType()
    {
        return $this->container['vehicle_type'];
    }

    /**
     * Sets vehicle_type
     * @param string $vehicle_type
     * @return $this
     */
    public function setVehicleType($vehicle_type)
    {
        $this->container['vehicle_type'] = $vehicle_type;

        return $this;
    }

    /**
     * Gets vin
     * @return string
     */
    public function getVin()
    {
        return $this->container['vin'];
    }

    /**
     * Sets vin
     * @param string $vin
     * @return $this
     */
    public function setVin($vin)
    {
        $this->container['vin'] = $vin;

        return $this;
    }

    /**
     * Gets vin_validation
     * @return string
     */
    public function getVinValidation()
    {
        return $this->container['vin_validation'];
    }

    /**
     * Sets vin_validation
     * @param string $vin_validation
     * @return $this
     */
    public function setVinValidation($vin_validation)
    {
        $this->container['vin_validation'] = $vin_validation;

        return $this;
    }

    /**
     * Gets vis
     * @return string
     */
    public function getVis()
    {
        return $this->container['vis'];
    }

    /**
     * Sets vis
     * @param string $vis
     * @return $this
     */
    public function setVis($vis)
    {
        $this->container['vis'] = $vis;

        return $this;
    }

    /**
     * Gets warnings
     * @return string[]
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     * @param string[] $warnings
     * @return $this
     */
    public function setWarnings($warnings)
    {
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets was_recalled
     * @return bool
     */
    public function getWasRecalled()
    {
        return $this->container['was_recalled'];
    }

    /**
     * Sets was_recalled
     * @param bool $was_recalled
     * @return $this
     */
    public function setWasRecalled($was_recalled)
    {
        $this->container['was_recalled'] = $was_recalled;

        return $this;
    }

    /**
     * Gets wheel
     * @return string
     */
    public function getWheel()
    {
        return $this->container['wheel'];
    }

    /**
     * Sets wheel
     * @param string $wheel
     * @return $this
     */
    public function setWheel($wheel)
    {
        $this->container['wheel'] = $wheel;

        return $this;
    }

    /**
     * Gets wmi
     * @return string
     */
    public function getWmi()
    {
        return $this->container['wmi'];
    }

    /**
     * Sets wmi
     * @param string $wmi
     * @return $this
     */
    public function setWmi($wmi)
    {
        $this->container['wmi'] = $wmi;

        return $this;
    }

    /**
     * Gets year
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     * @param int $year
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


