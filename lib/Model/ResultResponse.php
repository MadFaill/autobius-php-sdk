<?php
/**
 * ResultResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VIN-API
 *
 * # Условия использования  Данные, получаемые в API не подлежат передаче третьим лицам. Предоставляются исключительно для личного пользования. В случае обнаружения нарушений, администрация в праве в одностороннем порядке заблокировать доступ к API до выяснения обстоятельств.  # Принцип работы API  API асинхронное. Для того чтобы получить данные по VIN сначала необходимо добавить задачу в очередь и получить ее уникальный идентификатор. После чего уже по этому идентификатору можно получить данные.  При постановке задачи в очередь, вы можете указать URL, на который по ее готовности система автоматически отправит POST запрос с результатом. Таким образом не нужно будет самим забирать результат. В случае, если URL окажется недоступен, система попробует повторить отправку от 1 до 5 раз с разными интервалами. В случае, если эти попытки окажутся безуспешными, система перестанет отправлять результат и необходимо будет уже самостоятельно сделать запрос в API на получение результата по идентификатору задачи. Успешным является запрос, в ходе которого удаленный сервер вернул статус 200. Все остальные статусы система рассматривает как безуспешные.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@autobius.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ResultResponse Class Doc Comment
 *
 * @category    Class */
 // @description Result результат обработки запроса на получение информации по VIN его и возвращаем как результат так же можно теперь возвращать incomplete, это мега круто же &#x3D;)
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ResultResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ResultResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'approximation' => '\Swagger\Client\Model\ApproximationResult',
        'complete' => 'bool',
        'in_sale' => '\Swagger\Client\Model\InSaleResult',
        'law_info' => '\Swagger\Client\Model\LawResult',
        'request_date' => 'int',
        'request_id' => 'string',
        'status' => 'string',
        'success' => 'bool',
        'vin_decoder' => '\Swagger\Client\Model\DecoderResult'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'approximation' => 'approximation',
        'complete' => 'complete',
        'in_sale' => 'in_sale',
        'law_info' => 'law_info',
        'request_date' => 'request_date',
        'request_id' => 'request_id',
        'status' => 'status',
        'success' => 'success',
        'vin_decoder' => 'vin_decoder'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'approximation' => 'setApproximation',
        'complete' => 'setComplete',
        'in_sale' => 'setInSale',
        'law_info' => 'setLawInfo',
        'request_date' => 'setRequestDate',
        'request_id' => 'setRequestId',
        'status' => 'setStatus',
        'success' => 'setSuccess',
        'vin_decoder' => 'setVinDecoder'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'approximation' => 'getApproximation',
        'complete' => 'getComplete',
        'in_sale' => 'getInSale',
        'law_info' => 'getLawInfo',
        'request_date' => 'getRequestDate',
        'request_id' => 'getRequestId',
        'status' => 'getStatus',
        'success' => 'getSuccess',
        'vin_decoder' => 'getVinDecoder'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['approximation'] = isset($data['approximation']) ? $data['approximation'] : null;
        $this->container['complete'] = isset($data['complete']) ? $data['complete'] : null;
        $this->container['in_sale'] = isset($data['in_sale']) ? $data['in_sale'] : null;
        $this->container['law_info'] = isset($data['law_info']) ? $data['law_info'] : null;
        $this->container['request_date'] = isset($data['request_date']) ? $data['request_date'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['vin_decoder'] = isset($data['vin_decoder']) ? $data['vin_decoder'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets approximation
     * @return \Swagger\Client\Model\ApproximationResult
     */
    public function getApproximation()
    {
        return $this->container['approximation'];
    }

    /**
     * Sets approximation
     * @param \Swagger\Client\Model\ApproximationResult $approximation
     * @return $this
     */
    public function setApproximation($approximation)
    {
        $this->container['approximation'] = $approximation;

        return $this;
    }

    /**
     * Gets complete
     * @return bool
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     * @param bool $complete Маркер завершенности. Все ли данные получены или слежует еще раз обратиться за обновлением результата
     * @return $this
     */
    public function setComplete($complete)
    {
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets in_sale
     * @return \Swagger\Client\Model\InSaleResult
     */
    public function getInSale()
    {
        return $this->container['in_sale'];
    }

    /**
     * Sets in_sale
     * @param \Swagger\Client\Model\InSaleResult $in_sale
     * @return $this
     */
    public function setInSale($in_sale)
    {
        $this->container['in_sale'] = $in_sale;

        return $this;
    }

    /**
     * Gets law_info
     * @return \Swagger\Client\Model\LawResult
     */
    public function getLawInfo()
    {
        return $this->container['law_info'];
    }

    /**
     * Sets law_info
     * @param \Swagger\Client\Model\LawResult $law_info
     * @return $this
     */
    public function setLawInfo($law_info)
    {
        $this->container['law_info'] = $law_info;

        return $this;
    }

    /**
     * Gets request_date
     * @return int
     */
    public function getRequestDate()
    {
        return $this->container['request_date'];
    }

    /**
     * Sets request_date
     * @param int $request_date Дата формирования запроса в формате UnixTimestamp
     * @return $this
     */
    public function setRequestDate($request_date)
    {
        $this->container['request_date'] = $request_date;

        return $this;
    }

    /**
     * Gets request_id
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     * @param string $request_id Уникальный идентификатор запроса
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Статус выполнения (new, in_progress, incomplete, done)
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets success
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     * @param bool $success Статус обработки на стороне сервера
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets vin_decoder
     * @return \Swagger\Client\Model\DecoderResult
     */
    public function getVinDecoder()
    {
        return $this->container['vin_decoder'];
    }

    /**
     * Sets vin_decoder
     * @param \Swagger\Client\Model\DecoderResult $vin_decoder
     * @return $this
     */
    public function setVinDecoder($vin_decoder)
    {
        $this->container['vin_decoder'] = $vin_decoder;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


