<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VIN-API
 *
 * # Условия использования  Данные, получаемые в API не подлежат передаче третьим лицам. Предоставляются исключительно для личного пользования. В случае обнаружения нарушений, администрация в праве в одностороннем порядке заблокировать доступ к API до выяснения обстоятельств.  # Принцип работы API  API асинхронное. Для того чтобы получить данные по VIN сначала необходимо добавить задачу в очередь и получить ее уникальный идентификатор. После чего уже по этому идентификатору можно получить данные.  При постановке задачи в очередь, вы можете указать URL, на который по ее готовности система автоматически отправит POST запрос с результатом. Таким образом не нужно будет самим забирать результат. В случае, если URL окажется недоступен, система попробует повторить отправку от 1 до 5 раз с разными интервалами. В случае, если эти попытки окажутся безуспешными, система перестанет отправлять результат и необходимо будет уже самостоятельно сделать запрос в API на получение результата по идентификатору задачи. Успешным является запрос, в ходе которого удаленный сервер вернул статус 200. Все остальные статусы система рассматривает как безуспешные.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@autobius.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Personal API path identifier
     *
     * @var string
     */
    protected $apiPath;

    /**
     * Constructor
     *
     * @param string $apiPath Personal api path identifier
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct($apiPath, \Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.autobius.ru/');
        }

        $this->apiClient = $apiClient;
        $this->apiPath = "/api/" . $apiPath;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation loginRequest
     *
     * Авторизация и получение JWT Token.
     *
     * @param string $username Уникальный логин, выданный при регистрации (required)
     * @param string $password Личный пароль, выданный при регистрации (required)
     * @return \Swagger\Client\Model\LoginResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function loginRequest($username, $password)
    {
        list($response) = $this->loginRequestWithHttpInfo($username, $password);
        return $response;
    }

    /**
     * Operation loginRequestWithHttpInfo
     *
     * Авторизация и получение JWT Token.
     *
     * @param string $username Уникальный логин, выданный при регистрации (required)
     * @param string $password Личный пароль, выданный при регистрации (required)
     * @return Array of \Swagger\Client\Model\LoginResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function loginRequestWithHttpInfo($username, $password)
    {
        // verify the required parameter 'username' is set
        if ($username === null) {
            throw new \InvalidArgumentException('Missing the required parameter $username when calling loginRequest');
        }
        // verify the required parameter 'password' is set
        if ($password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $password when calling loginRequest');
        }
        // parse inputs
        $resourcePath = "/login";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($username !== null) {
            $formParams['username'] = $this->apiClient->getSerializer()->toFormValue($username);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = $this->apiClient->getSerializer()->toFormValue($password);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LoginResponse',
                '/login'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LoginResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LoginResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BaseResponseBody', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BaseResponseBody', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation refreshRequest
     *
     * Обновление авторизационного токена.
     *
     * @param string $authorisation Bearer заголовок с тоекном (required)
     * @return \Swagger\Client\Model\LoginResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function refreshRequest($authorisation)
    {
        list($response) = $this->refreshRequestWithHttpInfo($authorisation);
        return $response;
    }

    /**
     * Operation refreshRequestWithHttpInfo
     *
     * Обновление авторизационного токена.
     *
     * @param string $authorisation Bearer заголовок с тоекном (required)
     * @return Array of \Swagger\Client\Model\LoginResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function refreshRequestWithHttpInfo($authorisation)
    {
        // verify the required parameter 'authorisation' is set
        if ($authorisation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorisation when calling refreshRequest');
        }
        // parse inputs
        $resourcePath = "/auth/refresh_token";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorisation !== null) {
            $headerParams['Authorisation'] = $this->apiClient->getSerializer()->toHeaderValue($authorisation);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LoginResponse',
                '/auth/refresh_token'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LoginResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LoginResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BaseResponseBody', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation sourceDecoderRequest
     *
     * Декодирование VIN и получение по нему всей доступной информации по конкретному автомобилю.
     *
     * @param string $vin 17ти символьный уникальный идентификационный номер автомобиля  &#x60;! FRAME не поддерживается системой&#x60; (required)
     * @param string $authorisation Bearer заголовок с тоекном (required)
     * @return \Swagger\Client\Model\VinDecoderResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function sourceDecoderRequest($vin, $authorisation)
    {
        list($response) = $this->sourceDecoderRequestWithHttpInfo($vin, $authorisation);
        return $response;
    }

    /**
     * Operation sourceDecoderRequestWithHttpInfo
     *
     * Декодирование VIN и получение по нему всей доступной информации по конкретному автомобилю.
     *
     * @param string $vin 17ти символьный уникальный идентификационный номер автомобиля  &#x60;! FRAME не поддерживается системой&#x60; (required)
     * @param string $authorisation Bearer заголовок с тоекном (required)
     * @return Array of \Swagger\Client\Model\VinDecoderResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function sourceDecoderRequestWithHttpInfo($vin, $authorisation)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vin when calling sourceDecoderRequest');
        }
        // verify the required parameter 'authorisation' is set
        if ($authorisation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorisation when calling sourceDecoderRequest');
        }
        // parse inputs
        $resourcePath = $this->apiPath . "/sources/v1/decode/{vin}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorisation !== null) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getSerializer()->toHeaderValue($authorisation);
        }
        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                "{" . "vin" . "}",
                $this->apiClient->getSerializer()->toPathValue($vin),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\VinDecoderResponse',
                '/sources/v1/decode/{vin}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\VinDecoderResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\VinDecoderResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BaseResponseBody', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BaseResponseBody', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BaseResponseBody', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BaseResponseBody', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
